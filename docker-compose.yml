version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CATALOG_DB: ${CATALOG_DB}
      ORDERS_DB: ${ORDERS_DB}
      CELERY_DB: ${CELERY_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./db/create-dbs.sql:/docker-entrypoint-initdb.d/01-create-dbs.sql
      - ./db/catalog_tables_init.sql:/docker-entrypoint-initdb.d/02-catalog-init.sql
      - ./db/orders_tables_init.sql:/docker-entrypoint-initdb.d/03-orders-init.sql
      - ./db/celery_tables_init.sql:/docker-entrypoint-initdb.d/04-celery-init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  catalog_service:
    build: ./catalog_service
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${CATALOG_DB}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  orders_service:
    build: ./orders_service
    ports:
      - "8002:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${ORDERS_DB}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  reviews_service:
    build: ./reviews_service
    ports:
      - "8003:8000"
    environment:
      MONGODB_URL: mongodb://mongo:27017
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    hostname: mongo
    ports:
      - "27017:27017"
    networks:
      - app-network
    volumes:
      - mongo_data:/data/db

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: echo stat | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    depends_on:
      zookeeper:
        condition: service_healthy

  celery_worker:
    build: ./celery_worker
    ports:
      - "8004:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${CELERY_DB}
      CELERY_BROKER_URL: redis://redis:6379/0
      FIXER_ACCESS_KEY: ${FIXER_ACCESS_KEY}
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:

