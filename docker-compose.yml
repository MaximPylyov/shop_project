version: '3.8'

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      CATALOG_DB: ${CATALOG_DB}
      ORDERS_DB: ${ORDERS_DB}
      CELERY_DB: ${CELERY_DB}
      USERS_DB: ${USERS_DB}
    ports:
      - "5432:5432"
    volumes:
      - ./db/create-dbs.sql:/docker-entrypoint-initdb.d/01-create-dbs.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  catalog_service:
    build: ./catalog_service
    ports:
      - "8001:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${CATALOG_DB}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  orders_service:
    build: ./orders_service
    ports:
      - "8002:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${ORDERS_DB}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  users_service:
    build: ./users_service
    ports:
      - "8005:8000"
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${USERS_DB}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy

  reviews_service:
    build: ./reviews_service
    ports:
      - "8003:8000"
    environment:
      MONGODB_URL: mongodb://mongo:27017
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    hostname: mongo
    ports:
      - "27017:27017"
    networks:
      - app-network
    volumes:
      - mongo_data:/data/db

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: echo stat | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  kafka:
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:9093
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    depends_on:
      zookeeper:
        condition: service_healthy

  celery_api:
    build: ./celery_worker
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${CELERY_DB}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      FIXER_ACCESS_KEY: ${FIXER_ACCESS_KEY}
    ports:
      - "8004:8000"
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  celery_worker:
    build: ./celery_worker
    command: celery -A tasks worker --loglevel=info
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${CELERY_DB}
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      FIXER_ACCESS_KEY: ${FIXER_ACCESS_KEY}
    networks:
      - app-network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - app-network
    depends_on:
      - prometheus

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    networks:
      - app-network
    pid: "host"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'

  celery_exporter:
    image: danihodovic/celery-exporter:latest
    command: >
      --broker-url=redis://redis:6379/0
      --port=9540
    ports:
      - "9540:9540"
    networks:
      - app-network
    depends_on:
      - redis

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - app-network
    volumes:
      - esdata:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:8.13.4
    environment:
      - LS_JAVA_OPTS=-Xms256m -Xmx256m
    ports:
      - "5044:5044"
      - "5000:5000"
      - "9600:9600"
    networks:
      - app-network
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - app-network
    depends_on:
      - elasticsearch

networks:
  app-network:
    driver: bridge

volumes:
  mongo_data:
  esdata:

